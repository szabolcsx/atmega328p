GAS LISTING /tmp/cceooh85.s 			page 1


   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/szoke/AVR/lcd/",100,0,2,.Ltext0
   8               		.stabs	"lcd.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/cceooh85.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"io_mapping.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  62               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  63               		.stabs	"/usr/lib/gcc/avr/4.8.1/include/stdint.h",130,0,0,0
  64               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  65               		.stabs	"int8_t:t(6,1)=(0,10)",128,0,121,0
  66               		.stabs	"uint8_t:t(6,2)=(0,11)",128,0,122,0
  67               		.stabs	"int16_t:t(6,3)=(0,1)",128,0,123,0
  68               		.stabs	"uint16_t:t(6,4)=(0,4)",128,0,124,0
  69               		.stabs	"int32_t:t(6,5)=(0,3)",128,0,125,0
  70               		.stabs	"uint32_t:t(6,6)=(0,5)",128,0,126,0
  71               		.stabs	"int64_t:t(6,7)=(0,6)",128,0,128,0
  72               		.stabs	"uint64_t:t(6,8)=(0,7)",128,0,129,0
  73               		.stabs	"intptr_t:t(6,9)=(6,3)",128,0,142,0
  74               		.stabs	"uintptr_t:t(6,10)=(6,4)",128,0,147,0
  75               		.stabs	"int_least8_t:t(6,11)=(6,1)",128,0,159,0
  76               		.stabs	"uint_least8_t:t(6,12)=(6,2)",128,0,164,0
  77               		.stabs	"int_least16_t:t(6,13)=(6,3)",128,0,169,0
  78               		.stabs	"uint_least16_t:t(6,14)=(6,4)",128,0,174,0
  79               		.stabs	"int_least32_t:t(6,15)=(6,5)",128,0,179,0
  80               		.stabs	"uint_least32_t:t(6,16)=(6,6)",128,0,184,0
  81               		.stabs	"int_least64_t:t(6,17)=(6,7)",128,0,192,0
  82               		.stabs	"uint_least64_t:t(6,18)=(6,8)",128,0,199,0
  83               		.stabs	"int_fast8_t:t(6,19)=(6,1)",128,0,213,0
  84               		.stabs	"uint_fast8_t:t(6,20)=(6,2)",128,0,218,0
  85               		.stabs	"int_fast16_t:t(6,21)=(6,3)",128,0,223,0
  86               		.stabs	"uint_fast16_t:t(6,22)=(6,4)",128,0,228,0
  87               		.stabs	"int_fast32_t:t(6,23)=(6,5)",128,0,233,0
  88               		.stabs	"uint_fast32_t:t(6,24)=(6,6)",128,0,238,0
  89               		.stabs	"int_fast64_t:t(6,25)=(6,7)",128,0,246,0
  90               		.stabs	"uint_fast64_t:t(6,26)=(6,8)",128,0,253,0
  91               		.stabs	"intmax_t:t(6,27)=(6,7)",128,0,273,0
  92               		.stabs	"uintmax_t:t(6,28)=(6,8)",128,0,278,0
  93               		.stabn	162,0,0,0
  94               		.stabn	162,0,0,0
  95               		.stabs	"int_farptr_t:t(4,1)=(6,5)",128,0,77,0
  96               		.stabs	"uint_farptr_t:t(4,2)=(6,6)",128,0,81,0
  97               		.stabn	162,0,0,0
  98               		.stabn	162,0,0,0
  99               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 100               		.stabs	"__fuse_t:t(7,1)=(7,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 101               		.stabn	162,0,0,0
 102               		.stabn	162,0,0,0
 103               		.stabs	"bits:t(1,1)=(1,2)=s1B0:(6,2),0,1;B1:(6,2),1,1;B2:(6,2),2,1;B3:(6,2),3,1;B4:(6,2),4,1;B5:(6
 104               		.stabn	162,0,0,0
 105               		.stabs	"lcdwNibble:F(0,47)",36,0,42,lcdwNibble
 106               		.stabs	"nibble:P(0,11)",64,0,42,24
 107               	.global	lcdwNibble
 108               		.type	lcdwNibble, @function
 109               	lcdwNibble:
 110               		.stabd	46,0,0
   1:lcd.c         **** #include "global.h"
   2:lcd.c         **** #include "io_mapping.h"
   3:lcd.c         **** #include <util/delay.h>
   4:lcd.c         **** 
GAS LISTING /tmp/cceooh85.s 			page 3


   5:lcd.c         **** #include "lcd.h"
   6:lcd.c         **** 
   7:lcd.c         **** void lcdInit(unsigned char functionSet,
   8:lcd.c         ****     unsigned char displayControl,
   9:lcd.c         ****     unsigned char entryMode)
  10:lcd.c         **** {
  11:lcd.c         ****     _delay_ms(40);
  12:lcd.c         ****     LCD_EN = 0;
  13:lcd.c         **** 	LCD_RS = 0;
  14:lcd.c         **** 	lcdwNibble(0x03);
  15:lcd.c         **** 	_delay_ms(5);
  16:lcd.c         **** 	lcdwNibble(0x03);
  17:lcd.c         **** 	_delay_ms(5);
  18:lcd.c         **** 	lcdwNibble(0x03);
  19:lcd.c         **** 	_delay_ms(5);
  20:lcd.c         **** 	lcdwNibble(0x02);
  21:lcd.c         **** 	lcdWrite(functionSet); // Function set
  22:lcd.c         **** 	lcdWrite(LCD_CLEAR_DISPLAY); // Clear display
  23:lcd.c         **** 	lcdWrite(entryMode); // Entry mode set
  24:lcd.c         **** 	lcdWrite(displayControl); // Display on/off
  25:lcd.c         **** }
  26:lcd.c         **** 
  27:lcd.c         **** void lcdClear(void)
  28:lcd.c         **** {
  29:lcd.c         ****     LCD_EN = 0;
  30:lcd.c         **** 	LCD_RS = 0;
  31:lcd.c         **** 	lcdWrite(0b00000001);
  32:lcd.c         **** 	_delay_ms(2);
  33:lcd.c         **** }
  34:lcd.c         **** 
  35:lcd.c         **** void lcdWrite(unsigned char data)
  36:lcd.c         **** {
  37:lcd.c         ****     _delay_ms(1);
  38:lcd.c         **** 	lcdwNibble((data >> 4) & 0x0F);
  39:lcd.c         **** 	lcdwNibble(data & 0x0F);
  40:lcd.c         **** }
  41:lcd.c         **** 
  42:lcd.c         **** void lcdwNibble(unsigned char nibble)
  43:lcd.c         **** {
 111               		.stabn	68,0,43,.LM0-.LFBB1
 112               	.LM0:
 113               	.LFBB1:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
  44:lcd.c         ****     nibble &= 0x0F;
 118               		.stabn	68,0,44,.LM1-.LFBB1
 119               	.LM1:
 120 0000 982F      		mov r25,r24
 121 0002 9F70      		andi r25,lo8(15)
  45:lcd.c         **** 	LCD_D4 = nibble & 1;
 122               		.stabn	68,0,45,.LM2-.LFBB1
 123               	.LM2:
 124 0004 80FD      		sbrc r24,0
 125 0006 589A      		sbi 0xb,0
 126 0008 80FF      		sbrs r24,0
GAS LISTING /tmp/cceooh85.s 			page 4


 127 000a 5898      		cbi 0xb,0
  46:lcd.c         **** 	LCD_D5 = (nibble >> 1) & 1;
 128               		.stabn	68,0,46,.LM3-.LFBB1
 129               	.LM3:
 130 000c 91FB      		bst r25,1
 131 000e 8827      		clr r24
 132 0010 80F9      		bld r24,0
 133 0012 80FD      		sbrc r24,0
 134 0014 599A      		sbi 0xb,1
 135 0016 80FF      		sbrs r24,0
 136 0018 5998      		cbi 0xb,1
  47:lcd.c         **** 	LCD_D6 = (nibble >> 2) & 1;
 137               		.stabn	68,0,47,.LM4-.LFBB1
 138               	.LM4:
 139 001a 92FB      		bst r25,2
 140 001c 8827      		clr r24
 141 001e 80F9      		bld r24,0
 142 0020 80FD      		sbrc r24,0
 143 0022 5A9A      		sbi 0xb,2
 144 0024 80FF      		sbrs r24,0
 145 0026 5A98      		cbi 0xb,2
  48:lcd.c         **** 	LCD_D7 = (nibble >> 3) & 1;
 146               		.stabn	68,0,48,.LM5-.LFBB1
 147               	.LM5:
 148 0028 9695      		lsr r25
 149 002a 9695      		lsr r25
 150 002c 9695      		lsr r25
 151 002e 90FD      		sbrc r25,0
 152 0030 5B9A      		sbi 0xb,3
 153 0032 90FF      		sbrs r25,0
 154 0034 5B98      		cbi 0xb,3
  49:lcd.c         **** 	LCD_EN = 1;
 155               		.stabn	68,0,49,.LM6-.LFBB1
 156               	.LM6:
 157 0036 5D9A      		sbi 0xb,5
  50:lcd.c         **** 	asm("nop");
 158               		.stabn	68,0,50,.LM7-.LFBB1
 159               	.LM7:
 160               	/* #APP */
 161               	 ;  50 "lcd.c" 1
 162 0038 0000      		nop
 163               	 ;  0 "" 2
  51:lcd.c         **** 	LCD_EN = 0;
 164               		.stabn	68,0,51,.LM8-.LFBB1
 165               	.LM8:
 166               	/* #NOAPP */
 167 003a 5D98      		cbi 0xb,5
 168 003c 0895      		ret
 169               		.size	lcdwNibble, .-lcdwNibble
 170               	.Lscope1:
 171               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 172               		.stabd	78,0,0
 173               		.stabs	"lcdWrite:F(0,47)",36,0,35,lcdWrite
 174               		.stabs	"data:P(0,11)",64,0,35,28
 175               	.global	lcdWrite
 176               		.type	lcdWrite, @function
 177               	lcdWrite:
GAS LISTING /tmp/cceooh85.s 			page 5


 178               		.stabd	46,0,0
  36:lcd.c         ****     _delay_ms(1);
 179               		.stabn	68,0,36,.LM9-.LFBB2
 180               	.LM9:
 181               	.LFBB2:
 182 003e CF93      		push r28
 183               	/* prologue: function */
 184               	/* frame size = 0 */
 185               	/* stack size = 1 */
 186               	.L__stack_usage = 1
 187 0040 C82F      		mov r28,r24
 188               	.LBB14:
 189               	.LBB15:
 190               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 191               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
GAS LISTING /tmp/cceooh85.s 			page 6


  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
GAS LISTING /tmp/cceooh85.s 			page 7


 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
GAS LISTING /tmp/cceooh85.s 			page 8


 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 192               		.stabn	68,0,163,.LM10-.LFBB2
 193               	.LM10:
 194 0042 8FEC      		ldi r24,lo8(1999)
 195 0044 97E0      		ldi r25,hi8(1999)
 196 0046 0197      		1: sbiw r24,1
 197 0048 01F4      		brne 1b
 198 004a 00C0      		rjmp .
 199 004c 0000      		nop
 200               	.LBE15:
 201               	.LBE14:
 202               		.stabs	"lcd.c",132,0,0,.Ltext2
 203               	.Ltext2:
  38:lcd.c         **** 	lcdwNibble(data & 0x0F);
 204               		.stabn	68,0,38,.LM11-.LFBB2
 205               	.LM11:
 206 004e 8C2F      		mov r24,r28
 207 0050 8295      		swap r24
 208 0052 8F70      		andi r24,lo8(15)
 209 0054 0E94 0000 		call lcdwNibble
  39:lcd.c         **** }
 210               		.stabn	68,0,39,.LM12-.LFBB2
 211               	.LM12:
 212 0058 8C2F      		mov r24,r28
 213 005a 8F70      		andi r24,lo8(15)
 214               	/* epilogue start */
  40:lcd.c         **** 
 215               		.stabn	68,0,40,.LM13-.LFBB2
 216               	.LM13:
 217 005c CF91      		pop r28
  39:lcd.c         **** }
 218               		.stabn	68,0,39,.LM14-.LFBB2
 219               	.LM14:
 220 005e 0C94 0000 		jmp lcdwNibble
 221               		.size	lcdWrite, .-lcdWrite
 222               	.Lscope2:
 223               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 224               		.stabd	78,0,0
 225               		.stabs	"lcdClear:F(0,47)",36,0,27,lcdClear
 226               	.global	lcdClear
 227               		.type	lcdClear, @function
 228               	lcdClear:
 229               		.stabd	46,0,0
  28:lcd.c         ****     LCD_EN = 0;
 230               		.stabn	68,0,28,.LM15-.LFBB3
 231               	.LM15:
 232               	.LFBB3:
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 0 */
 236               	.L__stack_usage = 0
GAS LISTING /tmp/cceooh85.s 			page 9


  29:lcd.c         **** 	LCD_RS = 0;
 237               		.stabn	68,0,29,.LM16-.LFBB3
 238               	.LM16:
 239 0062 5D98      		cbi 0xb,5
  30:lcd.c         **** 	lcdWrite(0b00000001);
 240               		.stabn	68,0,30,.LM17-.LFBB3
 241               	.LM17:
 242 0064 5C98      		cbi 0xb,4
  31:lcd.c         **** 	_delay_ms(2);
 243               		.stabn	68,0,31,.LM18-.LFBB3
 244               	.LM18:
 245 0066 81E0      		ldi r24,lo8(1)
 246 0068 0E94 0000 		call lcdWrite
 247               	.LBB16:
 248               	.LBB17:
 249               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext3
 250               	.Ltext3:
 251               		.stabn	68,0,163,.LM19-.LFBB3
 252               	.LM19:
 253 006c 8FE9      		ldi r24,lo8(3999)
 254 006e 9FE0      		ldi r25,hi8(3999)
 255 0070 0197      		1: sbiw r24,1
 256 0072 01F4      		brne 1b
 257 0074 00C0      		rjmp .
 258 0076 0000      		nop
 259 0078 0895      		ret
 260               	.LBE17:
 261               	.LBE16:
 262               		.size	lcdClear, .-lcdClear
 263               	.Lscope3:
 264               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 265               		.stabd	78,0,0
 266               		.stabs	"lcdInit:F(0,47)",36,0,7,lcdInit
 267               		.stabs	"functionSet:P(0,11)",64,0,7,17
 268               		.stabs	"displayControl:P(0,11)",64,0,8,22
 269               		.stabs	"entryMode:P(0,11)",64,0,9,20
 270               	.global	lcdInit
 271               		.type	lcdInit, @function
 272               	lcdInit:
 273               		.stabd	46,0,0
 274               		.stabs	"lcd.c",132,0,0,.Ltext4
 275               	.Ltext4:
  10:lcd.c         ****     _delay_ms(40);
 276               		.stabn	68,0,10,.LM20-.LFBB4
 277               	.LM20:
 278               	.LFBB4:
 279 007a 1F93      		push r17
 280 007c CF93      		push r28
 281 007e DF93      		push r29
 282 0080 00D0      		rcall .
 283 0082 CDB7      		in r28,__SP_L__
 284 0084 DEB7      		in r29,__SP_H__
 285               	/* prologue: function */
 286               	/* frame size = 2 */
 287               	/* stack size = 5 */
 288               	.L__stack_usage = 5
 289 0086 182F      		mov r17,r24
GAS LISTING /tmp/cceooh85.s 			page 10


 290               	.LBB18:
 291               	.LBB19:
 292               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext5
 293               	.Ltext5:
 294               		.stabn	68,0,163,.LM21-.LFBB4
 295               	.LM21:
 296 0088 2FEF      		ldi r18,lo8(63999)
 297 008a 89EF      		ldi r24,hi8(63999)
 298 008c 90E0      		ldi r25,hlo8(63999)
 299 008e 2150      		1: subi r18,1
 300 0090 8040      		sbci r24,0
 301 0092 9040      		sbci r25,0
 302 0094 01F4      		brne 1b
 303 0096 00C0      		rjmp .
 304 0098 0000      		nop
 305               	.LBE19:
 306               	.LBE18:
 307               		.stabs	"lcd.c",132,0,0,.Ltext6
 308               	.Ltext6:
  12:lcd.c         **** 	LCD_RS = 0;
 309               		.stabn	68,0,12,.LM22-.LFBB4
 310               	.LM22:
 311 009a 5D98      		cbi 0xb,5
  13:lcd.c         **** 	lcdwNibble(0x03);
 312               		.stabn	68,0,13,.LM23-.LFBB4
 313               	.LM23:
 314 009c 5C98      		cbi 0xb,4
  14:lcd.c         **** 	_delay_ms(5);
 315               		.stabn	68,0,14,.LM24-.LFBB4
 316               	.LM24:
 317 009e 83E0      		ldi r24,lo8(3)
 318 00a0 4983      		std Y+1,r20
 319 00a2 6A83      		std Y+2,r22
 320 00a4 0E94 0000 		call lcdwNibble
 321               	.LBB20:
 322               	.LBB21:
 323               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext7
 324               	.Ltext7:
 325               		.stabn	68,0,163,.LM25-.LFBB4
 326               	.LM25:
 327 00a8 EFE0      		ldi r30,lo8(9999)
 328 00aa F7E2      		ldi r31,hi8(9999)
 329 00ac 3197      		1: sbiw r30,1
 330 00ae 01F4      		brne 1b
 331 00b0 00C0      		rjmp .
 332 00b2 0000      		nop
 333               	.LBE21:
 334               	.LBE20:
 335               		.stabs	"lcd.c",132,0,0,.Ltext8
 336               	.Ltext8:
  16:lcd.c         **** 	_delay_ms(5);
 337               		.stabn	68,0,16,.LM26-.LFBB4
 338               	.LM26:
 339 00b4 83E0      		ldi r24,lo8(3)
 340 00b6 0E94 0000 		call lcdwNibble
 341               	.LBB22:
 342               	.LBB23:
GAS LISTING /tmp/cceooh85.s 			page 11


 343               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext9
 344               	.Ltext9:
 345               		.stabn	68,0,163,.LM27-.LFBB4
 346               	.LM27:
 347 00ba 8FE0      		ldi r24,lo8(9999)
 348 00bc 97E2      		ldi r25,hi8(9999)
 349 00be 0197      		1: sbiw r24,1
 350 00c0 01F4      		brne 1b
 351 00c2 00C0      		rjmp .
 352 00c4 0000      		nop
 353               	.LBE23:
 354               	.LBE22:
 355               		.stabs	"lcd.c",132,0,0,.Ltext10
 356               	.Ltext10:
  18:lcd.c         **** 	_delay_ms(5);
 357               		.stabn	68,0,18,.LM28-.LFBB4
 358               	.LM28:
 359 00c6 83E0      		ldi r24,lo8(3)
 360 00c8 0E94 0000 		call lcdwNibble
 361               	.LBB24:
 362               	.LBB25:
 363               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext11
 364               	.Ltext11:
 365               		.stabn	68,0,163,.LM29-.LFBB4
 366               	.LM29:
 367 00cc EFE0      		ldi r30,lo8(9999)
 368 00ce F7E2      		ldi r31,hi8(9999)
 369 00d0 3197      		1: sbiw r30,1
 370 00d2 01F4      		brne 1b
 371 00d4 00C0      		rjmp .
 372 00d6 0000      		nop
 373               	.LBE25:
 374               	.LBE24:
 375               		.stabs	"lcd.c",132,0,0,.Ltext12
 376               	.Ltext12:
  20:lcd.c         **** 	lcdWrite(functionSet); // Function set
 377               		.stabn	68,0,20,.LM30-.LFBB4
 378               	.LM30:
 379 00d8 82E0      		ldi r24,lo8(2)
 380 00da 0E94 0000 		call lcdwNibble
  21:lcd.c         **** 	lcdWrite(LCD_CLEAR_DISPLAY); // Clear display
 381               		.stabn	68,0,21,.LM31-.LFBB4
 382               	.LM31:
 383 00de 812F      		mov r24,r17
 384 00e0 0E94 0000 		call lcdWrite
  22:lcd.c         **** 	lcdWrite(entryMode); // Entry mode set
 385               		.stabn	68,0,22,.LM32-.LFBB4
 386               	.LM32:
 387 00e4 81E0      		ldi r24,lo8(1)
 388 00e6 0E94 0000 		call lcdWrite
  23:lcd.c         **** 	lcdWrite(displayControl); // Display on/off
 389               		.stabn	68,0,23,.LM33-.LFBB4
 390               	.LM33:
 391 00ea 4981      		ldd r20,Y+1
 392 00ec 842F      		mov r24,r20
 393 00ee 0E94 0000 		call lcdWrite
  24:lcd.c         **** }
GAS LISTING /tmp/cceooh85.s 			page 12


 394               		.stabn	68,0,24,.LM34-.LFBB4
 395               	.LM34:
 396 00f2 6A81      		ldd r22,Y+2
 397 00f4 862F      		mov r24,r22
 398               	/* epilogue start */
  25:lcd.c         **** 
 399               		.stabn	68,0,25,.LM35-.LFBB4
 400               	.LM35:
 401 00f6 0F90      		pop __tmp_reg__
 402 00f8 0F90      		pop __tmp_reg__
 403 00fa DF91      		pop r29
 404 00fc CF91      		pop r28
 405 00fe 1F91      		pop r17
  24:lcd.c         **** }
 406               		.stabn	68,0,24,.LM36-.LFBB4
 407               	.LM36:
 408 0100 0C94 0000 		jmp lcdWrite
 409               		.size	lcdInit, .-lcdInit
 410               	.Lscope4:
 411               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 412               		.stabd	78,0,0
 413               		.stabs	"lcdwCmd:F(0,47)",36,0,54,lcdwCmd
 414               		.stabs	"command:P(0,11)",64,0,54,24
 415               	.global	lcdwCmd
 416               		.type	lcdwCmd, @function
 417               	lcdwCmd:
 418               		.stabd	46,0,0
  52:lcd.c         **** }
  53:lcd.c         **** 
  54:lcd.c         **** void lcdwCmd(unsigned char command)
  55:lcd.c         **** {
 419               		.stabn	68,0,55,.LM37-.LFBB5
 420               	.LM37:
 421               	.LFBB5:
 422               	/* prologue: function */
 423               	/* frame size = 0 */
 424               	/* stack size = 0 */
 425               	.L__stack_usage = 0
  56:lcd.c         ****     LCD_EN = 0;
 426               		.stabn	68,0,56,.LM38-.LFBB5
 427               	.LM38:
 428 0104 5D98      		cbi 0xb,5
  57:lcd.c         **** 	LCD_RS = 0;
 429               		.stabn	68,0,57,.LM39-.LFBB5
 430               	.LM39:
 431 0106 5C98      		cbi 0xb,4
  58:lcd.c         ****     lcdWrite(command);
 432               		.stabn	68,0,58,.LM40-.LFBB5
 433               	.LM40:
 434 0108 0C94 0000 		jmp lcdWrite
 435               		.size	lcdwCmd, .-lcdwCmd
 436               	.Lscope5:
 437               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 438               		.stabd	78,0,0
 439               		.stabs	"lcdwChar:F(0,47)",36,0,61,lcdwChar
 440               		.stabs	"character:P(0,11)",64,0,61,24
 441               	.global	lcdwChar
GAS LISTING /tmp/cceooh85.s 			page 13


 442               		.type	lcdwChar, @function
 443               	lcdwChar:
 444               		.stabd	46,0,0
  59:lcd.c         **** }
  60:lcd.c         **** 
  61:lcd.c         **** void lcdwChar(unsigned char character)
  62:lcd.c         **** {
 445               		.stabn	68,0,62,.LM41-.LFBB6
 446               	.LM41:
 447               	.LFBB6:
 448               	/* prologue: function */
 449               	/* frame size = 0 */
 450               	/* stack size = 0 */
 451               	.L__stack_usage = 0
  63:lcd.c         ****     LCD_EN = 0;
 452               		.stabn	68,0,63,.LM42-.LFBB6
 453               	.LM42:
 454 010c 5D98      		cbi 0xb,5
  64:lcd.c         ****     LCD_RS = 1;
 455               		.stabn	68,0,64,.LM43-.LFBB6
 456               	.LM43:
 457 010e 5C9A      		sbi 0xb,4
  65:lcd.c         ****     lcdWrite(character);
 458               		.stabn	68,0,65,.LM44-.LFBB6
 459               	.LM44:
 460 0110 0C94 0000 		jmp lcdWrite
 461               		.size	lcdwChar, .-lcdwChar
 462               	.Lscope6:
 463               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 464               		.stabd	78,0,0
 465               		.stabs	"lcdwString:F(0,47)",36,0,68,lcdwString
 466               		.stabs	"string:P(0,48)=*(0,2)",64,0,68,24
 467               	.global	lcdwString
 468               		.type	lcdwString, @function
 469               	lcdwString:
 470               		.stabd	46,0,0
  66:lcd.c         **** }
  67:lcd.c         **** 
  68:lcd.c         **** void lcdwString(char* string)
  69:lcd.c         **** {
 471               		.stabn	68,0,69,.LM45-.LFBB7
 472               	.LM45:
 473               	.LFBB7:
 474 0114 CF93      		push r28
 475 0116 DF93      		push r29
 476               	/* prologue: function */
 477               	/* frame size = 0 */
 478               	/* stack size = 2 */
 479               	.L__stack_usage = 2
 480 0118 EC01      		movw r28,r24
 481               	.L8:
  70:lcd.c         ****     while(*string)
 482               		.stabn	68,0,70,.LM46-.LFBB7
 483               	.LM46:
 484 011a 8991      		ld r24,Y+
 485 011c 8823      		tst r24
 486 011e 01F0      		breq .L11
GAS LISTING /tmp/cceooh85.s 			page 14


  71:lcd.c         ****     {
  72:lcd.c         ****         lcdwChar(*(string++));
 487               		.stabn	68,0,72,.LM47-.LFBB7
 488               	.LM47:
 489 0120 0E94 0000 		call lcdwChar
 490 0124 00C0      		rjmp .L8
 491               	.L11:
 492               	/* epilogue start */
  73:lcd.c         ****     }
  74:lcd.c         **** }
 493               		.stabn	68,0,74,.LM48-.LFBB7
 494               	.LM48:
 495 0126 DF91      		pop r29
 496 0128 CF91      		pop r28
 497 012a 0895      		ret
 498               		.size	lcdwString, .-lcdwString
 499               	.Lscope7:
 500               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 501               		.stabd	78,0,0
 502               		.stabs	"lcdwUInt:F(0,47)",36,0,121,lcdwUInt
 503               		.stabs	"data:P(0,4)",64,0,121,24
 504               	.global	lcdwUInt
 505               		.type	lcdwUInt, @function
 506               	lcdwUInt:
 507               		.stabd	46,0,0
  75:lcd.c         **** 
  76:lcd.c         **** void lcdwStringNFill(char* string,
  77:lcd.c         ****     char length)
  78:lcd.c         **** {
  79:lcd.c         ****     while(*string)
  80:lcd.c         ****     {
  81:lcd.c         ****         lcdwChar(*(string++));
  82:lcd.c         ****         length--;
  83:lcd.c         ****     }
  84:lcd.c         **** 
  85:lcd.c         ****     if(length > 0)
  86:lcd.c         ****     {
  87:lcd.c         ****         lcdFill(' ', length);
  88:lcd.c         ****     }
  89:lcd.c         **** }
  90:lcd.c         **** 
  91:lcd.c         **** void lcdwStringAt(unsigned char row,
  92:lcd.c         ****     unsigned char column,
  93:lcd.c         ****     char* string)
  94:lcd.c         **** {
  95:lcd.c         ****     lcdAdvance(row, column);
  96:lcd.c         ****     lcdwString(string);
  97:lcd.c         **** }
  98:lcd.c         **** 
  99:lcd.c         **** void lcdwInt(int data)
 100:lcd.c         **** {
 101:lcd.c         ****     if(data < 0)
 102:lcd.c         ****     {
 103:lcd.c         ****         lcdwChar('-');
 104:lcd.c         ****         data *= -1;
 105:lcd.c         ****     }
 106:lcd.c         **** 
GAS LISTING /tmp/cceooh85.s 			page 15


 107:lcd.c         ****     lcdwUInt(data);
 108:lcd.c         **** }
 109:lcd.c         **** 
 110:lcd.c         **** void lcdwLong(long int data)
 111:lcd.c         **** {
 112:lcd.c         ****     if(data < 0)
 113:lcd.c         ****     {
 114:lcd.c         ****         lcdwChar('-');
 115:lcd.c         ****         data *= -1;
 116:lcd.c         ****     }
 117:lcd.c         **** 
 118:lcd.c         ****     lcdwUInt(data);
 119:lcd.c         **** }
 120:lcd.c         **** 
 121:lcd.c         **** void lcdwUInt(unsigned int data)
 122:lcd.c         **** {
 508               		.stabn	68,0,122,.LM49-.LFBB8
 509               	.LM49:
 510               	.LFBB8:
 511 012c EF92      		push r14
 512 012e FF92      		push r15
 513 0130 0F93      		push r16
 514 0132 1F93      		push r17
 515 0134 CF93      		push r28
 516 0136 DF93      		push r29
 517 0138 00D0      		rcall .
 518 013a 00D0      		rcall .
 519 013c 1F92      		push __zero_reg__
 520 013e CDB7      		in r28,__SP_L__
 521 0140 DEB7      		in r29,__SP_H__
 522               	/* prologue: function */
 523               	/* frame size = 5 */
 524               	/* stack size = 11 */
 525               	.L__stack_usage = 11
 526 0142 FE01      		movw r30,r28
 527 0144 3196      		adiw r30,1
 528 0146 7F01      		movw r14,r30
 123:lcd.c         ****     char buffer[5];
 124:lcd.c         **** 	int size = 0;
 125:lcd.c         **** 
 126:lcd.c         **** 	do
 127:lcd.c         **** 	{
 128:lcd.c         **** 		buffer[size] = data % 10;
 529               		.stabn	68,0,128,.LM50-.LFBB8
 530               	.LM50:
 531 0148 2AE0      		ldi r18,lo8(10)
 532 014a 30E0      		ldi r19,0
 533               	.L14:
 534 014c 8F01      		movw r16,r30
 535 014e 0E19      		sub r16,r14
 536 0150 1F09      		sbc r17,r15
 537               		.stabn	68,0,128,.LM51-.LFBB8
 538               	.LM51:
 539 0152 B901      		movw r22,r18
 540 0154 0E94 0000 		call __udivmodhi4
 541 0158 8193      		st Z+,r24
 129:lcd.c         **** 		data /= 10;
GAS LISTING /tmp/cceooh85.s 			page 16


 542               		.stabn	68,0,129,.LM52-.LFBB8
 543               	.LM52:
 544 015a CB01      		movw r24,r22
 130:lcd.c         **** 		size++;
 131:lcd.c         **** 	} while (data > 0);
 545               		.stabn	68,0,131,.LM53-.LFBB8
 546               	.LM53:
 547 015c 0097      		sbiw r24,0
 548 015e 01F4      		brne .L14
 549               	.L16:
 550 0160 F701      		movw r30,r14
 551 0162 E00F      		add r30,r16
 552 0164 F11F      		adc r31,r17
 132:lcd.c         **** 
 133:lcd.c         **** 	for(size--; size >= 0; size--)
 134:lcd.c         **** 		lcdwChar(buffer[size] + 48);
 553               		.stabn	68,0,134,.LM54-.LFBB8
 554               	.LM54:
 555 0166 8081      		ld r24,Z
 556 0168 805D      		subi r24,lo8(-(48))
 557 016a 0E94 0000 		call lcdwChar
 133:lcd.c         **** 		lcdwChar(buffer[size] + 48);
 558               		.stabn	68,0,133,.LM55-.LFBB8
 559               	.LM55:
 560 016e 0150      		subi r16,1
 561 0170 1109      		sbc r17,__zero_reg__
 562 0172 00F4      		brcc .L16
 563               	/* epilogue start */
 135:lcd.c         **** }
 564               		.stabn	68,0,135,.LM56-.LFBB8
 565               	.LM56:
 566 0174 0F90      		pop __tmp_reg__
 567 0176 0F90      		pop __tmp_reg__
 568 0178 0F90      		pop __tmp_reg__
 569 017a 0F90      		pop __tmp_reg__
 570 017c 0F90      		pop __tmp_reg__
 571 017e DF91      		pop r29
 572 0180 CF91      		pop r28
 573 0182 1F91      		pop r17
 574 0184 0F91      		pop r16
 575 0186 FF90      		pop r15
 576 0188 EF90      		pop r14
 577 018a 0895      		ret
 578               		.size	lcdwUInt, .-lcdwUInt
 579               		.stabs	"buffer:(0,49)=ar(0,50)=r(0,50);0;0177777;;0;4;(0,2)",128,0,123,1
 580               		.stabs	"size:r(0,1)",64,0,124,16
 581               		.stabn	192,0,0,.LFBB8-.LFBB8
 582               		.stabn	224,0,0,.Lscope8-.LFBB8
 583               	.Lscope8:
 584               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 585               		.stabd	78,0,0
 586               		.stabs	"lcdwInt:F(0,47)",36,0,99,lcdwInt
 587               		.stabs	"data:P(0,1)",64,0,99,28
 588               	.global	lcdwInt
 589               		.type	lcdwInt, @function
 590               	lcdwInt:
 591               		.stabd	46,0,0
GAS LISTING /tmp/cceooh85.s 			page 17


 100:lcd.c         ****     if(data < 0)
 592               		.stabn	68,0,100,.LM57-.LFBB9
 593               	.LM57:
 594               	.LFBB9:
 595 018c CF93      		push r28
 596 018e DF93      		push r29
 597               	/* prologue: function */
 598               	/* frame size = 0 */
 599               	/* stack size = 2 */
 600               	.L__stack_usage = 2
 601 0190 EC01      		movw r28,r24
 101:lcd.c         ****     {
 602               		.stabn	68,0,101,.LM58-.LFBB9
 603               	.LM58:
 604 0192 97FF      		sbrs r25,7
 605 0194 00C0      		rjmp .L19
 103:lcd.c         ****         data *= -1;
 606               		.stabn	68,0,103,.LM59-.LFBB9
 607               	.LM59:
 608 0196 8DE2      		ldi r24,lo8(45)
 609 0198 0E94 0000 		call lcdwChar
 104:lcd.c         ****     }
 610               		.stabn	68,0,104,.LM60-.LFBB9
 611               	.LM60:
 612 019c D195      		neg r29
 613 019e C195      		neg r28
 614 01a0 D109      		sbc r29,__zero_reg__
 615               	.L19:
 107:lcd.c         **** }
 616               		.stabn	68,0,107,.LM61-.LFBB9
 617               	.LM61:
 618 01a2 CE01      		movw r24,r28
 619               	/* epilogue start */
 108:lcd.c         **** 
 620               		.stabn	68,0,108,.LM62-.LFBB9
 621               	.LM62:
 622 01a4 DF91      		pop r29
 623 01a6 CF91      		pop r28
 107:lcd.c         **** }
 624               		.stabn	68,0,107,.LM63-.LFBB9
 625               	.LM63:
 626 01a8 0C94 0000 		jmp lcdwUInt
 627               		.size	lcdwInt, .-lcdwInt
 628               	.Lscope9:
 629               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 630               		.stabd	78,0,0
 631               		.stabs	"lcdwLong:F(0,47)",36,0,110,lcdwLong
 632               		.stabs	"data:P(0,3)",64,0,110,12
 633               	.global	lcdwLong
 634               		.type	lcdwLong, @function
 635               	lcdwLong:
 636               		.stabd	46,0,0
 111:lcd.c         ****     if(data < 0)
 637               		.stabn	68,0,111,.LM64-.LFBB10
 638               	.LM64:
 639               	.LFBB10:
 640 01ac CF92      		push r12
GAS LISTING /tmp/cceooh85.s 			page 18


 641 01ae DF92      		push r13
 642 01b0 EF92      		push r14
 643 01b2 FF92      		push r15
 644               	/* prologue: function */
 645               	/* frame size = 0 */
 646               	/* stack size = 4 */
 647               	.L__stack_usage = 4
 648 01b4 6B01      		movw r12,r22
 649 01b6 7C01      		movw r14,r24
 112:lcd.c         ****     {
 650               		.stabn	68,0,112,.LM65-.LFBB10
 651               	.LM65:
 652 01b8 97FF      		sbrs r25,7
 653 01ba 00C0      		rjmp .L21
 114:lcd.c         ****         data *= -1;
 654               		.stabn	68,0,114,.LM66-.LFBB10
 655               	.LM66:
 656 01bc 8DE2      		ldi r24,lo8(45)
 657 01be 0E94 0000 		call lcdwChar
 115:lcd.c         ****     }
 658               		.stabn	68,0,115,.LM67-.LFBB10
 659               	.LM67:
 660 01c2 F094      		com r15
 661 01c4 E094      		com r14
 662 01c6 D094      		com r13
 663 01c8 C094      		com r12
 664 01ca C11C      		adc r12,__zero_reg__
 665 01cc D11C      		adc r13,__zero_reg__
 666 01ce E11C      		adc r14,__zero_reg__
 667 01d0 F11C      		adc r15,__zero_reg__
 668               	.L21:
 118:lcd.c         **** }
 669               		.stabn	68,0,118,.LM68-.LFBB10
 670               	.LM68:
 671 01d2 C601      		movw r24,r12
 672               	/* epilogue start */
 119:lcd.c         **** 
 673               		.stabn	68,0,119,.LM69-.LFBB10
 674               	.LM69:
 675 01d4 FF90      		pop r15
 676 01d6 EF90      		pop r14
 677 01d8 DF90      		pop r13
 678 01da CF90      		pop r12
 118:lcd.c         **** }
 679               		.stabn	68,0,118,.LM70-.LFBB10
 680               	.LM70:
 681 01dc 0C94 0000 		jmp lcdwUInt
 682               		.size	lcdwLong, .-lcdwLong
 683               	.Lscope10:
 684               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 685               		.stabd	78,0,0
 686               		.stabs	"lcdwULong:F(0,47)",36,0,137,lcdwULong
 687               		.stabs	"data:P(0,5)",64,0,137,22
 688               	.global	lcdwULong
 689               		.type	lcdwULong, @function
 690               	lcdwULong:
 691               		.stabd	46,0,0
GAS LISTING /tmp/cceooh85.s 			page 19


 136:lcd.c         **** 
 137:lcd.c         **** void lcdwULong(unsigned long int data)
 138:lcd.c         **** {
 692               		.stabn	68,0,138,.LM71-.LFBB11
 693               	.LM71:
 694               	.LFBB11:
 695 01e0 8F92      		push r8
 696 01e2 9F92      		push r9
 697 01e4 AF92      		push r10
 698 01e6 BF92      		push r11
 699 01e8 CF92      		push r12
 700 01ea DF92      		push r13
 701 01ec EF92      		push r14
 702 01ee FF92      		push r15
 703 01f0 0F93      		push r16
 704 01f2 1F93      		push r17
 705 01f4 CF93      		push r28
 706 01f6 DF93      		push r29
 707 01f8 CDB7      		in r28,__SP_L__
 708 01fa DEB7      		in r29,__SP_H__
 709 01fc 2A97      		sbiw r28,10
 710 01fe 0FB6      		in __tmp_reg__,__SREG__
 711 0200 F894      		cli
 712 0202 DEBF      		out __SP_H__,r29
 713 0204 0FBE      		out __SREG__,__tmp_reg__
 714 0206 CDBF      		out __SP_L__,r28
 715               	/* prologue: function */
 716               	/* frame size = 10 */
 717               	/* stack size = 22 */
 718               	.L__stack_usage = 22
 719 0208 9E01      		movw r18,r28
 720 020a 2F5F      		subi r18,-1
 721 020c 3F4F      		sbci r19,-1
 722 020e 7901      		movw r14,r18
 723 0210 6901      		movw r12,r18
 139:lcd.c         ****     char buffer[10];
 140:lcd.c         **** 	int size = 0;
 141:lcd.c         **** 
 142:lcd.c         **** 	do
 143:lcd.c         **** 	{
 144:lcd.c         **** 		buffer[size] = data % 10;
 724               		.stabn	68,0,144,.LM72-.LFBB11
 725               	.LM72:
 726 0212 2AE0      		ldi r18,lo8(10)
 727 0214 822E      		mov r8,r18
 728 0216 912C      		mov r9,__zero_reg__
 729 0218 A12C      		mov r10,__zero_reg__
 730 021a B12C      		mov r11,__zero_reg__
 731               	.L24:
 732 021c 8701      		movw r16,r14
 733 021e 0C19      		sub r16,r12
 734 0220 1D09      		sbc r17,r13
 735               		.stabn	68,0,144,.LM73-.LFBB11
 736               	.LM73:
 737 0222 A501      		movw r20,r10
 738 0224 9401      		movw r18,r8
 739 0226 0E94 0000 		call __udivmodsi4
GAS LISTING /tmp/cceooh85.s 			page 20


 740 022a F701      		movw r30,r14
 741 022c 6193      		st Z+,r22
 742 022e 7F01      		movw r14,r30
 145:lcd.c         **** 		data /= 10;
 743               		.stabn	68,0,145,.LM74-.LFBB11
 744               	.LM74:
 745 0230 B901      		movw r22,r18
 746 0232 CA01      		movw r24,r20
 146:lcd.c         **** 		size++;
 147:lcd.c         **** 	} while (data > 0);
 747               		.stabn	68,0,147,.LM75-.LFBB11
 748               	.LM75:
 749 0234 6115      		cp r22,__zero_reg__
 750 0236 7105      		cpc r23,__zero_reg__
 751 0238 8105      		cpc r24,__zero_reg__
 752 023a 9105      		cpc r25,__zero_reg__
 753 023c 01F4      		brne .L24
 754               	.L26:
 755 023e F601      		movw r30,r12
 756 0240 E00F      		add r30,r16
 757 0242 F11F      		adc r31,r17
 148:lcd.c         **** 
 149:lcd.c         **** 	for(size--; size >= 0; size--)
 150:lcd.c         **** 		lcdwChar(buffer[size] + 48);
 758               		.stabn	68,0,150,.LM76-.LFBB11
 759               	.LM76:
 760 0244 8081      		ld r24,Z
 761 0246 805D      		subi r24,lo8(-(48))
 762 0248 0E94 0000 		call lcdwChar
 149:lcd.c         **** 		lcdwChar(buffer[size] + 48);
 763               		.stabn	68,0,149,.LM77-.LFBB11
 764               	.LM77:
 765 024c 0150      		subi r16,1
 766 024e 1109      		sbc r17,__zero_reg__
 767 0250 00F4      		brcc .L26
 768               	/* epilogue start */
 151:lcd.c         **** }
 769               		.stabn	68,0,151,.LM78-.LFBB11
 770               	.LM78:
 771 0252 2A96      		adiw r28,10
 772 0254 0FB6      		in __tmp_reg__,__SREG__
 773 0256 F894      		cli
 774 0258 DEBF      		out __SP_H__,r29
 775 025a 0FBE      		out __SREG__,__tmp_reg__
 776 025c CDBF      		out __SP_L__,r28
 777 025e DF91      		pop r29
 778 0260 CF91      		pop r28
 779 0262 1F91      		pop r17
 780 0264 0F91      		pop r16
 781 0266 FF90      		pop r15
 782 0268 EF90      		pop r14
 783 026a DF90      		pop r13
 784 026c CF90      		pop r12
 785 026e BF90      		pop r11
 786 0270 AF90      		pop r10
 787 0272 9F90      		pop r9
 788 0274 8F90      		pop r8
GAS LISTING /tmp/cceooh85.s 			page 21


 789 0276 0895      		ret
 790               		.size	lcdwULong, .-lcdwULong
 791               		.stabs	"buffer:(0,51)=ar(0,50);0;9;(0,2)",128,0,139,1
 792               		.stabs	"size:r(0,1)",64,0,140,16
 793               		.stabn	192,0,0,.LFBB11-.LFBB11
 794               		.stabn	224,0,0,.Lscope11-.LFBB11
 795               	.Lscope11:
 796               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 797               		.stabd	78,0,0
 798               		.stabs	"lcdFill:F(0,47)",36,0,153,lcdFill
 799               		.stabs	"character:P(0,11)",64,0,153,17
 800               		.stabs	"n:P(0,2)",64,0,154,22
 801               	.global	lcdFill
 802               		.type	lcdFill, @function
 803               	lcdFill:
 804               		.stabd	46,0,0
 152:lcd.c         **** 
 153:lcd.c         **** void lcdFill(unsigned char character,
 154:lcd.c         ****     char n)
 155:lcd.c         **** {
 805               		.stabn	68,0,155,.LM79-.LFBB12
 806               	.LM79:
 807               	.LFBB12:
 808 0278 1F93      		push r17
 809 027a CF93      		push r28
 810 027c DF93      		push r29
 811 027e 1F92      		push __zero_reg__
 812 0280 CDB7      		in r28,__SP_L__
 813 0282 DEB7      		in r29,__SP_H__
 814               	/* prologue: function */
 815               	/* frame size = 1 */
 816               	/* stack size = 4 */
 817               	.L__stack_usage = 4
 818 0284 182F      		mov r17,r24
 819               	.L29:
 156:lcd.c         ****     for(; n > 0; n--)
 820               		.stabn	68,0,156,.LM80-.LFBB12
 821               	.LM80:
 822 0286 6623      		tst r22
 823 0288 01F0      		breq .L31
 157:lcd.c         ****     {
 158:lcd.c         ****         lcdwChar(character);
 824               		.stabn	68,0,158,.LM81-.LFBB12
 825               	.LM81:
 826 028a 812F      		mov r24,r17
 827 028c 6983      		std Y+1,r22
 828 028e 0E94 0000 		call lcdwChar
 156:lcd.c         ****     for(; n > 0; n--)
 829               		.stabn	68,0,156,.LM82-.LFBB12
 830               	.LM82:
 831 0292 6981      		ldd r22,Y+1
 832 0294 6150      		subi r22,lo8(-(-1))
 833 0296 00C0      		rjmp .L29
 834               	.L31:
 835               	/* epilogue start */
 159:lcd.c         ****     }
 160:lcd.c         **** }
GAS LISTING /tmp/cceooh85.s 			page 22


 836               		.stabn	68,0,160,.LM83-.LFBB12
 837               	.LM83:
 838 0298 0F90      		pop __tmp_reg__
 839 029a DF91      		pop r29
 840 029c CF91      		pop r28
 841 029e 1F91      		pop r17
 842 02a0 0895      		ret
 843               		.size	lcdFill, .-lcdFill
 844               	.Lscope12:
 845               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 846               		.stabd	78,0,0
 847               		.stabs	"lcdwStringNFill:F(0,47)",36,0,76,lcdwStringNFill
 848               		.stabs	"length:P(0,2)",64,0,77,22
 849               	.global	lcdwStringNFill
 850               		.type	lcdwStringNFill, @function
 851               	lcdwStringNFill:
 852               		.stabd	46,0,0
  78:lcd.c         ****     while(*string)
 853               		.stabn	68,0,78,.LM84-.LFBB13
 854               	.LM84:
 855               	.LFBB13:
 856 02a2 1F93      		push r17
 857 02a4 CF93      		push r28
 858 02a6 DF93      		push r29
 859               	/* prologue: function */
 860               	/* frame size = 0 */
 861               	/* stack size = 3 */
 862               	.L__stack_usage = 3
 863 02a8 162F      		mov r17,r22
  79:lcd.c         ****     {
 864               		.stabn	68,0,79,.LM85-.LFBB13
 865               	.LM85:
 866 02aa C82F      		mov r28,r24
 867 02ac D92F      		mov r29,r25
 868 02ae 180F      		add r17,r24
 869               	.L33:
 870 02b0 612F      		mov r22,r17
 871 02b2 6C1B      		sub r22,r28
  79:lcd.c         ****     {
 872               		.stabn	68,0,79,.LM86-.LFBB13
 873               	.LM86:
 874 02b4 8991      		ld r24,Y+
 875 02b6 8823      		tst r24
 876 02b8 01F0      		breq .L36
  81:lcd.c         ****         length--;
 877               		.stabn	68,0,81,.LM87-.LFBB13
 878               	.LM87:
 879 02ba 0E94 0000 		call lcdwChar
 880 02be 00C0      		rjmp .L33
 881               	.L36:
  85:lcd.c         ****     {
 882               		.stabn	68,0,85,.LM88-.LFBB13
 883               	.LM88:
 884 02c0 6623      		tst r22
 885 02c2 01F0      		breq .L32
  87:lcd.c         ****     }
 886               		.stabn	68,0,87,.LM89-.LFBB13
GAS LISTING /tmp/cceooh85.s 			page 23


 887               	.LM89:
 888 02c4 80E2      		ldi r24,lo8(32)
 889               	/* epilogue start */
  89:lcd.c         **** 
 890               		.stabn	68,0,89,.LM90-.LFBB13
 891               	.LM90:
 892 02c6 DF91      		pop r29
 893 02c8 CF91      		pop r28
 894 02ca 1F91      		pop r17
  87:lcd.c         ****     }
 895               		.stabn	68,0,87,.LM91-.LFBB13
 896               	.LM91:
 897 02cc 0C94 0000 		jmp lcdFill
 898               	.L32:
 899               	/* epilogue start */
  89:lcd.c         **** 
 900               		.stabn	68,0,89,.LM92-.LFBB13
 901               	.LM92:
 902 02d0 DF91      		pop r29
 903 02d2 CF91      		pop r28
 904 02d4 1F91      		pop r17
 905 02d6 0895      		ret
 906               		.size	lcdwStringNFill, .-lcdwStringNFill
 907               	.Lscope13:
 908               		.stabs	"",36,0,0,.Lscope13-.LFBB13
 909               		.stabd	78,0,0
 910               		.stabs	"lcdAdvance:F(0,47)",36,0,162,lcdAdvance
 911               		.stabs	"row:P(0,11)",64,0,162,24
 912               		.stabs	"column:P(0,11)",64,0,163,22
 913               	.global	lcdAdvance
 914               		.type	lcdAdvance, @function
 915               	lcdAdvance:
 916               		.stabd	46,0,0
 161:lcd.c         **** 
 162:lcd.c         **** void lcdAdvance(unsigned char row,
 163:lcd.c         ****     unsigned char column)
 164:lcd.c         **** {
 917               		.stabn	68,0,164,.LM93-.LFBB14
 918               	.LM93:
 919               	.LFBB14:
 920               	/* prologue: function */
 921               	/* frame size = 0 */
 922               	/* stack size = 0 */
 923               	.L__stack_usage = 0
 165:lcd.c         ****     switch(row)
 924               		.stabn	68,0,165,.LM94-.LFBB14
 925               	.LM94:
 926 02d8 8130      		cpi r24,lo8(1)
 927 02da 01F0      		breq .L39
 928 02dc 8230      		cpi r24,lo8(2)
 929 02de 01F0      		breq .L41
 930 02e0 0895      		ret
 931               	.L39:
 166:lcd.c         ****     {
 167:lcd.c         ****         case 1:
 168:lcd.c         ****             row = LCD_LINE1;
 932               		.stabn	68,0,168,.LM95-.LFBB14
GAS LISTING /tmp/cceooh85.s 			page 24


 933               	.LM95:
 934 02e2 90E8      		ldi r25,lo8(-128)
 935 02e4 00C0      		rjmp .L40
 936               	.L41:
 169:lcd.c         ****             break;
 170:lcd.c         **** 
 171:lcd.c         ****         case 2:
 172:lcd.c         ****             row = LCD_LINE2;
 937               		.stabn	68,0,172,.LM96-.LFBB14
 938               	.LM96:
 939 02e6 90EC      		ldi r25,lo8(-64)
 940               	.L40:
 173:lcd.c         ****             break;
 174:lcd.c         **** 
 175:lcd.c         ****         default:
 176:lcd.c         ****             return;
 177:lcd.c         ****     }
 178:lcd.c         **** 
 179:lcd.c         ****     lcdwCmd(LCD_XY(row, column));
 941               		.stabn	68,0,179,.LM97-.LFBB14
 942               	.LM97:
 943 02e8 8FEF      		ldi r24,lo8(-1)
 944 02ea 860F      		add r24,r22
 945 02ec 890F      		add r24,r25
 946 02ee 0C94 0000 		jmp lcdwCmd
 947               		.size	lcdAdvance, .-lcdAdvance
 948               	.Lscope14:
 949               		.stabs	"",36,0,0,.Lscope14-.LFBB14
 950               		.stabd	78,0,0
 951               		.stabs	"lcdwStringAt:F(0,47)",36,0,91,lcdwStringAt
 952               		.stabs	"row:P(0,11)",64,0,91,24
 953               		.stabs	"column:P(0,11)",64,0,92,22
 954               		.stabs	"string:P(0,48)",64,0,93,28
 955               	.global	lcdwStringAt
 956               		.type	lcdwStringAt, @function
 957               	lcdwStringAt:
 958               		.stabd	46,0,0
  94:lcd.c         ****     lcdAdvance(row, column);
 959               		.stabn	68,0,94,.LM98-.LFBB15
 960               	.LM98:
 961               	.LFBB15:
 962 02f2 CF93      		push r28
 963 02f4 DF93      		push r29
 964               	/* prologue: function */
 965               	/* frame size = 0 */
 966               	/* stack size = 2 */
 967               	.L__stack_usage = 2
 968 02f6 EA01      		movw r28,r20
  95:lcd.c         ****     lcdwString(string);
 969               		.stabn	68,0,95,.LM99-.LFBB15
 970               	.LM99:
 971 02f8 0E94 0000 		call lcdAdvance
  96:lcd.c         **** }
 972               		.stabn	68,0,96,.LM100-.LFBB15
 973               	.LM100:
 974 02fc CE01      		movw r24,r28
 975               	/* epilogue start */
GAS LISTING /tmp/cceooh85.s 			page 25


  97:lcd.c         **** 
 976               		.stabn	68,0,97,.LM101-.LFBB15
 977               	.LM101:
 978 02fe DF91      		pop r29
 979 0300 CF91      		pop r28
  96:lcd.c         **** }
 980               		.stabn	68,0,96,.LM102-.LFBB15
 981               	.LM102:
 982 0302 0C94 0000 		jmp lcdwString
 983               		.size	lcdwStringAt, .-lcdwStringAt
 984               	.Lscope15:
 985               		.stabs	"",36,0,0,.Lscope15-.LFBB15
 986               		.stabd	78,0,0
 987               		.stabs	"lcdInitBargraph:F(0,47)",36,0,182,lcdInitBargraph
 988               	.global	lcdInitBargraph
 989               		.type	lcdInitBargraph, @function
 990               	lcdInitBargraph:
 991               		.stabd	46,0,0
 180:lcd.c         **** }
 181:lcd.c         **** 
 182:lcd.c         **** void lcdInitBargraph(void)
 183:lcd.c         **** {
 992               		.stabn	68,0,183,.LM103-.LFBB16
 993               	.LM103:
 994               	.LFBB16:
 995               	/* prologue: function */
 996               	/* frame size = 0 */
 997               	/* stack size = 0 */
 998               	.L__stack_usage = 0
 184:lcd.c         ****     lcdwCmd(LCD_SET_CGRAM_ADDRESS);
 999               		.stabn	68,0,184,.LM104-.LFBB16
 1000               	.LM104:
 1001 0306 80E4      		ldi r24,lo8(64)
 1002 0308 0E94 0000 		call lcdwCmd
 185:lcd.c         **** 
 186:lcd.c         ****     // 100% Segment
 187:lcd.c         ****     lcdwChar(0b00000);
 1003               		.stabn	68,0,187,.LM105-.LFBB16
 1004               	.LM105:
 1005 030c 80E0      		ldi r24,0
 1006 030e 0E94 0000 		call lcdwChar
 188:lcd.c         ****     lcdwChar(0b11111);
 1007               		.stabn	68,0,188,.LM106-.LFBB16
 1008               	.LM106:
 1009 0312 8FE1      		ldi r24,lo8(31)
 1010 0314 0E94 0000 		call lcdwChar
 189:lcd.c         ****     lcdwChar(0b11111);
 1011               		.stabn	68,0,189,.LM107-.LFBB16
 1012               	.LM107:
 1013 0318 8FE1      		ldi r24,lo8(31)
 1014 031a 0E94 0000 		call lcdwChar
 190:lcd.c         ****     lcdwChar(0b11111);
 1015               		.stabn	68,0,190,.LM108-.LFBB16
 1016               	.LM108:
 1017 031e 8FE1      		ldi r24,lo8(31)
 1018 0320 0E94 0000 		call lcdwChar
 191:lcd.c         ****     lcdwChar(0b11111);
GAS LISTING /tmp/cceooh85.s 			page 26


 1019               		.stabn	68,0,191,.LM109-.LFBB16
 1020               	.LM109:
 1021 0324 8FE1      		ldi r24,lo8(31)
 1022 0326 0E94 0000 		call lcdwChar
 192:lcd.c         ****     lcdwChar(0b11111);
 1023               		.stabn	68,0,192,.LM110-.LFBB16
 1024               	.LM110:
 1025 032a 8FE1      		ldi r24,lo8(31)
 1026 032c 0E94 0000 		call lcdwChar
 193:lcd.c         ****     lcdwChar(0b00000);
 1027               		.stabn	68,0,193,.LM111-.LFBB16
 1028               	.LM111:
 1029 0330 80E0      		ldi r24,0
 1030 0332 0E94 0000 		call lcdwChar
 194:lcd.c         ****     lcdwChar(0b00000);
 1031               		.stabn	68,0,194,.LM112-.LFBB16
 1032               	.LM112:
 1033 0336 80E0      		ldi r24,0
 1034 0338 0E94 0000 		call lcdwChar
 195:lcd.c         **** 
 196:lcd.c         ****     // 20% Segment
 197:lcd.c         ****     lcdwChar(0b00000);
 1035               		.stabn	68,0,197,.LM113-.LFBB16
 1036               	.LM113:
 1037 033c 80E0      		ldi r24,0
 1038 033e 0E94 0000 		call lcdwChar
 198:lcd.c         ****     lcdwChar(0b11111);
 1039               		.stabn	68,0,198,.LM114-.LFBB16
 1040               	.LM114:
 1041 0342 8FE1      		ldi r24,lo8(31)
 1042 0344 0E94 0000 		call lcdwChar
 199:lcd.c         ****     lcdwChar(0b10000);
 1043               		.stabn	68,0,199,.LM115-.LFBB16
 1044               	.LM115:
 1045 0348 80E1      		ldi r24,lo8(16)
 1046 034a 0E94 0000 		call lcdwChar
 200:lcd.c         ****     lcdwChar(0b10101);
 1047               		.stabn	68,0,200,.LM116-.LFBB16
 1048               	.LM116:
 1049 034e 85E1      		ldi r24,lo8(21)
 1050 0350 0E94 0000 		call lcdwChar
 201:lcd.c         ****     lcdwChar(0b10000);
 1051               		.stabn	68,0,201,.LM117-.LFBB16
 1052               	.LM117:
 1053 0354 80E1      		ldi r24,lo8(16)
 1054 0356 0E94 0000 		call lcdwChar
 202:lcd.c         ****     lcdwChar(0b11111);
 1055               		.stabn	68,0,202,.LM118-.LFBB16
 1056               	.LM118:
 1057 035a 8FE1      		ldi r24,lo8(31)
 1058 035c 0E94 0000 		call lcdwChar
 203:lcd.c         ****     lcdwChar(0b00000);
 1059               		.stabn	68,0,203,.LM119-.LFBB16
 1060               	.LM119:
 1061 0360 80E0      		ldi r24,0
 1062 0362 0E94 0000 		call lcdwChar
 204:lcd.c         ****     lcdwChar(0b00000);
GAS LISTING /tmp/cceooh85.s 			page 27


 1063               		.stabn	68,0,204,.LM120-.LFBB16
 1064               	.LM120:
 1065 0366 80E0      		ldi r24,0
 1066 0368 0E94 0000 		call lcdwChar
 205:lcd.c         **** 
 206:lcd.c         ****     // 40% Segment
 207:lcd.c         ****     lcdwChar(0b00000);
 1067               		.stabn	68,0,207,.LM121-.LFBB16
 1068               	.LM121:
 1069 036c 80E0      		ldi r24,0
 1070 036e 0E94 0000 		call lcdwChar
 208:lcd.c         ****     lcdwChar(0b11111);
 1071               		.stabn	68,0,208,.LM122-.LFBB16
 1072               	.LM122:
 1073 0372 8FE1      		ldi r24,lo8(31)
 1074 0374 0E94 0000 		call lcdwChar
 209:lcd.c         ****     lcdwChar(0b11000);
 1075               		.stabn	68,0,209,.LM123-.LFBB16
 1076               	.LM123:
 1077 0378 88E1      		ldi r24,lo8(24)
 1078 037a 0E94 0000 		call lcdwChar
 210:lcd.c         ****     lcdwChar(0b11101);
 1079               		.stabn	68,0,210,.LM124-.LFBB16
 1080               	.LM124:
 1081 037e 8DE1      		ldi r24,lo8(29)
 1082 0380 0E94 0000 		call lcdwChar
 211:lcd.c         ****     lcdwChar(0b11000);
 1083               		.stabn	68,0,211,.LM125-.LFBB16
 1084               	.LM125:
 1085 0384 88E1      		ldi r24,lo8(24)
 1086 0386 0E94 0000 		call lcdwChar
 212:lcd.c         ****     lcdwChar(0b11111);
 1087               		.stabn	68,0,212,.LM126-.LFBB16
 1088               	.LM126:
 1089 038a 8FE1      		ldi r24,lo8(31)
 1090 038c 0E94 0000 		call lcdwChar
 213:lcd.c         ****     lcdwChar(0b00000);
 1091               		.stabn	68,0,213,.LM127-.LFBB16
 1092               	.LM127:
 1093 0390 80E0      		ldi r24,0
 1094 0392 0E94 0000 		call lcdwChar
 214:lcd.c         ****     lcdwChar(0b00000);
 1095               		.stabn	68,0,214,.LM128-.LFBB16
 1096               	.LM128:
 1097 0396 80E0      		ldi r24,0
 1098 0398 0E94 0000 		call lcdwChar
 215:lcd.c         **** 
 216:lcd.c         ****     // 60% Segment
 217:lcd.c         ****     lcdwChar(0b00000);
 1099               		.stabn	68,0,217,.LM129-.LFBB16
 1100               	.LM129:
 1101 039c 80E0      		ldi r24,0
 1102 039e 0E94 0000 		call lcdwChar
 218:lcd.c         ****     lcdwChar(0b11111);
 1103               		.stabn	68,0,218,.LM130-.LFBB16
 1104               	.LM130:
 1105 03a2 8FE1      		ldi r24,lo8(31)
GAS LISTING /tmp/cceooh85.s 			page 28


 1106 03a4 0E94 0000 		call lcdwChar
 219:lcd.c         ****     lcdwChar(0b11100);
 1107               		.stabn	68,0,219,.LM131-.LFBB16
 1108               	.LM131:
 1109 03a8 8CE1      		ldi r24,lo8(28)
 1110 03aa 0E94 0000 		call lcdwChar
 220:lcd.c         ****     lcdwChar(0b11101);
 1111               		.stabn	68,0,220,.LM132-.LFBB16
 1112               	.LM132:
 1113 03ae 8DE1      		ldi r24,lo8(29)
 1114 03b0 0E94 0000 		call lcdwChar
 221:lcd.c         ****     lcdwChar(0b11100);
 1115               		.stabn	68,0,221,.LM133-.LFBB16
 1116               	.LM133:
 1117 03b4 8CE1      		ldi r24,lo8(28)
 1118 03b6 0E94 0000 		call lcdwChar
 222:lcd.c         ****     lcdwChar(0b11111);
 1119               		.stabn	68,0,222,.LM134-.LFBB16
 1120               	.LM134:
 1121 03ba 8FE1      		ldi r24,lo8(31)
 1122 03bc 0E94 0000 		call lcdwChar
 223:lcd.c         ****     lcdwChar(0b00000);
 1123               		.stabn	68,0,223,.LM135-.LFBB16
 1124               	.LM135:
 1125 03c0 80E0      		ldi r24,0
 1126 03c2 0E94 0000 		call lcdwChar
 224:lcd.c         ****     lcdwChar(0b00000);
 1127               		.stabn	68,0,224,.LM136-.LFBB16
 1128               	.LM136:
 1129 03c6 80E0      		ldi r24,0
 1130 03c8 0E94 0000 		call lcdwChar
 225:lcd.c         **** 
 226:lcd.c         ****     // 80% Segment
 227:lcd.c         ****     lcdwChar(0b00000);
 1131               		.stabn	68,0,227,.LM137-.LFBB16
 1132               	.LM137:
 1133 03cc 80E0      		ldi r24,0
 1134 03ce 0E94 0000 		call lcdwChar
 228:lcd.c         ****     lcdwChar(0b11111);
 1135               		.stabn	68,0,228,.LM138-.LFBB16
 1136               	.LM138:
 1137 03d2 8FE1      		ldi r24,lo8(31)
 1138 03d4 0E94 0000 		call lcdwChar
 229:lcd.c         ****     lcdwChar(0b11110);
 1139               		.stabn	68,0,229,.LM139-.LFBB16
 1140               	.LM139:
 1141 03d8 8EE1      		ldi r24,lo8(30)
 1142 03da 0E94 0000 		call lcdwChar
 230:lcd.c         ****     lcdwChar(0b11111);
 1143               		.stabn	68,0,230,.LM140-.LFBB16
 1144               	.LM140:
 1145 03de 8FE1      		ldi r24,lo8(31)
 1146 03e0 0E94 0000 		call lcdwChar
 231:lcd.c         ****     lcdwChar(0b11110);
 1147               		.stabn	68,0,231,.LM141-.LFBB16
 1148               	.LM141:
 1149 03e4 8EE1      		ldi r24,lo8(30)
GAS LISTING /tmp/cceooh85.s 			page 29


 1150 03e6 0E94 0000 		call lcdwChar
 232:lcd.c         ****     lcdwChar(0b11111);
 1151               		.stabn	68,0,232,.LM142-.LFBB16
 1152               	.LM142:
 1153 03ea 8FE1      		ldi r24,lo8(31)
 1154 03ec 0E94 0000 		call lcdwChar
 233:lcd.c         ****     lcdwChar(0b00000);
 1155               		.stabn	68,0,233,.LM143-.LFBB16
 1156               	.LM143:
 1157 03f0 80E0      		ldi r24,0
 1158 03f2 0E94 0000 		call lcdwChar
 234:lcd.c         ****     lcdwChar(0b00000);
 1159               		.stabn	68,0,234,.LM144-.LFBB16
 1160               	.LM144:
 1161 03f6 80E0      		ldi r24,0
 1162 03f8 0E94 0000 		call lcdwChar
 235:lcd.c         **** 
 236:lcd.c         ****     // Dots
 237:lcd.c         ****     lcdwChar(0b00000);
 1163               		.stabn	68,0,237,.LM145-.LFBB16
 1164               	.LM145:
 1165 03fc 80E0      		ldi r24,0
 1166 03fe 0E94 0000 		call lcdwChar
 238:lcd.c         ****     lcdwChar(0b11111);
 1167               		.stabn	68,0,238,.LM146-.LFBB16
 1168               	.LM146:
 1169 0402 8FE1      		ldi r24,lo8(31)
 1170 0404 0E94 0000 		call lcdwChar
 239:lcd.c         ****     lcdwChar(0b00000);
 1171               		.stabn	68,0,239,.LM147-.LFBB16
 1172               	.LM147:
 1173 0408 80E0      		ldi r24,0
 1174 040a 0E94 0000 		call lcdwChar
 240:lcd.c         ****     lcdwChar(0b10101);
 1175               		.stabn	68,0,240,.LM148-.LFBB16
 1176               	.LM148:
 1177 040e 85E1      		ldi r24,lo8(21)
 1178 0410 0E94 0000 		call lcdwChar
 241:lcd.c         ****     lcdwChar(0b00000);
 1179               		.stabn	68,0,241,.LM149-.LFBB16
 1180               	.LM149:
 1181 0414 80E0      		ldi r24,0
 1182 0416 0E94 0000 		call lcdwChar
 242:lcd.c         ****     lcdwChar(0b11111);
 1183               		.stabn	68,0,242,.LM150-.LFBB16
 1184               	.LM150:
 1185 041a 8FE1      		ldi r24,lo8(31)
 1186 041c 0E94 0000 		call lcdwChar
 243:lcd.c         ****     lcdwChar(0b00000);
 1187               		.stabn	68,0,243,.LM151-.LFBB16
 1188               	.LM151:
 1189 0420 80E0      		ldi r24,0
 1190 0422 0E94 0000 		call lcdwChar
 244:lcd.c         ****     lcdwChar(0b00000);
 1191               		.stabn	68,0,244,.LM152-.LFBB16
 1192               	.LM152:
 1193 0426 80E0      		ldi r24,0
GAS LISTING /tmp/cceooh85.s 			page 30


 1194 0428 0C94 0000 		jmp lcdwChar
 1195               		.size	lcdInitBargraph, .-lcdInitBargraph
 1196               	.Lscope16:
 1197               		.stabs	"",36,0,0,.Lscope16-.LFBB16
 1198               		.stabd	78,0,0
 1199               		.stabs	"lcdPrintBargraphAt:F(0,47)",36,0,269,lcdPrintBargraphAt
 1200               		.stabs	"row:P(0,11)",64,0,269,24
 1201               		.stabs	"column:P(0,11)",64,0,270,22
 1202               		.stabs	"level:P(0,5)",64,0,271,8
 1203               		.stabs	"maxLevel:P(0,5)",64,0,272,4
 1204               		.stabs	"size:P(0,11)",64,0,273,12
 1205               	.global	lcdPrintBargraphAt
 1206               		.type	lcdPrintBargraphAt, @function
 1207               	lcdPrintBargraphAt:
 1208               		.stabd	46,0,0
 245:lcd.c         **** 
 246:lcd.c         **** #ifdef LCD_BARGRAPH_BEGIN_END
 247:lcd.c         ****     // Begin
 248:lcd.c         ****     lcdwChar(0b00000);
 249:lcd.c         ****     lcdwChar(0b00001);
 250:lcd.c         ****     lcdwChar(0b00001);
 251:lcd.c         ****     lcdwChar(0b00101);
 252:lcd.c         ****     lcdwChar(0b00001);
 253:lcd.c         ****     lcdwChar(0b00001);
 254:lcd.c         ****     lcdwChar(0b00000);
 255:lcd.c         ****     lcdwChar(0b00000);
 256:lcd.c         **** 
 257:lcd.c         ****     // End
 258:lcd.c         ****     lcdwChar(0b00000);
 259:lcd.c         ****     lcdwChar(0b10000);
 260:lcd.c         ****     lcdwChar(0b10000);
 261:lcd.c         ****     lcdwChar(0b10100);
 262:lcd.c         ****     lcdwChar(0b10000);
 263:lcd.c         ****     lcdwChar(0b10000);
 264:lcd.c         ****     lcdwChar(0b00000);
 265:lcd.c         ****     lcdwChar(0b00000);
 266:lcd.c         **** #endif /* LCD_BARGRAPH_BEGIN_END */
 267:lcd.c         **** }
 268:lcd.c         **** 
 269:lcd.c         **** void lcdPrintBargraphAt(unsigned char row,
 270:lcd.c         ****     unsigned char column,
 271:lcd.c         ****     unsigned long int level,
 272:lcd.c         ****     unsigned long int maxLevel,
 273:lcd.c         ****     unsigned char size)
 274:lcd.c         **** {
 1209               		.stabn	68,0,274,.LM153-.LFBB17
 1210               	.LM153:
 1211               	.LFBB17:
 1212 042c 4F92      		push r4
 1213 042e 5F92      		push r5
 1214 0430 6F92      		push r6
 1215 0432 7F92      		push r7
 1216 0434 8F92      		push r8
 1217 0436 9F92      		push r9
 1218 0438 AF92      		push r10
 1219 043a BF92      		push r11
 1220 043c CF92      		push r12
GAS LISTING /tmp/cceooh85.s 			page 31


 1221 043e DF92      		push r13
 1222 0440 EF92      		push r14
 1223 0442 FF92      		push r15
 1224 0444 0F93      		push r16
 1225 0446 1F93      		push r17
 1226 0448 CF93      		push r28
 1227 044a DF93      		push r29
 1228 044c 00D0      		rcall .
 1229 044e 00D0      		rcall .
 1230 0450 CDB7      		in r28,__SP_L__
 1231 0452 DEB7      		in r29,__SP_H__
 1232               	/* prologue: function */
 1233               	/* frame size = 4 */
 1234               	/* stack size = 20 */
 1235               	.L__stack_usage = 20
 1236 0454 4901      		movw r8,r18
 1237 0456 5A01      		movw r10,r20
 275:lcd.c         ****     lcdAdvance(row, column);
 1238               		.stabn	68,0,275,.LM154-.LFBB17
 1239               	.LM154:
 1240 0458 0E94 0000 		call lcdAdvance
 276:lcd.c         **** 
 277:lcd.c         **** #ifdef LCD_BARGRAPH_BEGIN_END
 278:lcd.c         ****     lcdwChar(0x06);
 279:lcd.c         ****     size -= 2;
 280:lcd.c         **** #endif /* LCD_BARGRAPH_BEGIN_END */
 281:lcd.c         ****     if(level >= maxLevel)
 1241               		.stabn	68,0,281,.LM155-.LFBB17
 1242               	.LM155:
 1243 045c 8E14      		cp r8,r14
 1244 045e 9F04      		cpc r9,r15
 1245 0460 A006      		cpc r10,r16
 1246 0462 B106      		cpc r11,r17
 1247 0464 00F0      		brlo .L46
 282:lcd.c         ****     {
 283:lcd.c         ****         lcdFill(0x00, size);
 1248               		.stabn	68,0,283,.LM156-.LFBB17
 1249               	.LM156:
 1250 0466 6C2D      		mov r22,r12
 1251 0468 80E0      		ldi r24,0
 1252 046a 00C0      		rjmp .L51
 1253               	.L46:
 1254               	.LBB26:
 284:lcd.c         ****     }
 285:lcd.c         ****     else
 286:lcd.c         ****     {
 287:lcd.c         ****         unsigned long int length = level * size * 5 / maxLevel;
 1255               		.stabn	68,0,287,.LM157-.LFBB17
 1256               	.LM157:
 1257 046c 2C2D      		mov r18,r12
 1258 046e 30E0      		ldi r19,0
 1259 0470 A5E0      		ldi r26,lo8(5)
 1260 0472 B0E0      		ldi r27,0
 1261 0474 0E94 0000 		call __umulhisi3
 1262 0478 9B01      		movw r18,r22
 1263 047a AC01      		movw r20,r24
 1264 047c C501      		movw r24,r10
GAS LISTING /tmp/cceooh85.s 			page 32


 1265 047e B401      		movw r22,r8
 1266 0480 0E94 0000 		call __mulsi3
 1267 0484 A801      		movw r20,r16
 1268 0486 9701      		movw r18,r14
 1269 0488 0E94 0000 		call __udivmodsi4
 288:lcd.c         ****         unsigned char lastChar = length % 5;
 1270               		.stabn	68,0,288,.LM158-.LFBB17
 1271               	.LM158:
 1272 048c CA01      		movw r24,r20
 1273 048e B901      		movw r22,r18
 1274 0490 25E0      		ldi r18,lo8(5)
 1275 0492 30E0      		ldi r19,0
 1276 0494 40E0      		ldi r20,0
 1277 0496 50E0      		ldi r21,0
 1278 0498 0E94 0000 		call __udivmodsi4
 1279 049c B62E      		mov r11,r22
 289:lcd.c         **** 
 290:lcd.c         ****         lcdFill(0x00, length / 5);
 1280               		.stabn	68,0,290,.LM159-.LFBB17
 1281               	.LM159:
 1282 049e 622F      		mov r22,r18
 1283 04a0 80E0      		ldi r24,0
 1284 04a2 2983      		std Y+1,r18
 1285 04a4 3A83      		std Y+2,r19
 1286 04a6 4B83      		std Y+3,r20
 1287 04a8 5C83      		std Y+4,r21
 1288 04aa 0E94 0000 		call lcdFill
 287:lcd.c         ****         unsigned char lastChar = length % 5;
 1289               		.stabn	68,0,287,.LM160-.LFBB17
 1290               	.LM160:
 1291 04ae D12C      		mov r13,__zero_reg__
 1292 04b0 E12C      		mov r14,__zero_reg__
 1293 04b2 F12C      		mov r15,__zero_reg__
 291:lcd.c         ****         length = size - length / 5;
 1294               		.stabn	68,0,291,.LM161-.LFBB17
 1295               	.LM161:
 1296 04b4 2981      		ldd r18,Y+1
 1297 04b6 3A81      		ldd r19,Y+2
 1298 04b8 4B81      		ldd r20,Y+3
 1299 04ba 5C81      		ldd r21,Y+4
 1300 04bc C21A      		sub r12,r18
 1301 04be D30A      		sbc r13,r19
 1302 04c0 E40A      		sbc r14,r20
 1303 04c2 F50A      		sbc r15,r21
 292:lcd.c         ****         if(lastChar > 0)
 1304               		.stabn	68,0,292,.LM162-.LFBB17
 1305               	.LM162:
 1306 04c4 BB20      		tst r11
 1307 04c6 01F0      		breq .L47
 293:lcd.c         ****         {
 294:lcd.c         ****             length--;
 1308               		.stabn	68,0,294,.LM163-.LFBB17
 1309               	.LM163:
 1310 04c8 81E0      		ldi r24,1
 1311 04ca C81A      		sub r12,r24
 1312 04cc D108      		sbc r13,__zero_reg__
 1313 04ce E108      		sbc r14,__zero_reg__
GAS LISTING /tmp/cceooh85.s 			page 33


 1314 04d0 F108      		sbc r15,__zero_reg__
 295:lcd.c         ****             lcdwChar(lastChar);
 1315               		.stabn	68,0,295,.LM164-.LFBB17
 1316               	.LM164:
 1317 04d2 8B2D      		mov r24,r11
 1318 04d4 0E94 0000 		call lcdwChar
 1319               	.L47:
 296:lcd.c         ****         }
 297:lcd.c         **** 
 298:lcd.c         ****         lcdFill(0x05, length);
 1320               		.stabn	68,0,298,.LM165-.LFBB17
 1321               	.LM165:
 1322 04d8 6C2D      		mov r22,r12
 1323 04da 85E0      		ldi r24,lo8(5)
 1324               	.L51:
 1325               	/* epilogue start */
 1326               	.LBE26:
 299:lcd.c         ****     }
 300:lcd.c         **** #ifdef LCD_BARGRAPH_BEGIN_END
 301:lcd.c         ****         lcdwChar(0x07);
 302:lcd.c         **** #endif /* LCD_BARGRAPH_BEGIN_END */
 303:lcd.c         **** }
 1327               		.stabn	68,0,303,.LM166-.LFBB17
 1328               	.LM166:
 1329 04dc 0F90      		pop __tmp_reg__
 1330 04de 0F90      		pop __tmp_reg__
 1331 04e0 0F90      		pop __tmp_reg__
 1332 04e2 0F90      		pop __tmp_reg__
 1333 04e4 DF91      		pop r29
 1334 04e6 CF91      		pop r28
 1335 04e8 1F91      		pop r17
 1336 04ea 0F91      		pop r16
 1337 04ec FF90      		pop r15
 1338 04ee EF90      		pop r14
 1339 04f0 DF90      		pop r13
 1340 04f2 CF90      		pop r12
 1341 04f4 BF90      		pop r11
 1342 04f6 AF90      		pop r10
 1343 04f8 9F90      		pop r9
 1344 04fa 8F90      		pop r8
 1345 04fc 7F90      		pop r7
 1346 04fe 6F90      		pop r6
 1347 0500 5F90      		pop r5
 1348 0502 4F90      		pop r4
 1349               	.LBB27:
 298:lcd.c         ****     }
 1350               		.stabn	68,0,298,.LM167-.LFBB17
 1351               	.LM167:
 1352 0504 0C94 0000 		jmp lcdFill
 1353               	.LBE27:
 1354               		.size	lcdPrintBargraphAt, .-lcdPrintBargraphAt
 1355               		.stabs	"lastChar:r(0,11)",64,0,288,10
 1356               		.stabn	192,0,0,.LBB26-.LFBB17
 1357               		.stabn	224,0,0,.LBE26-.LFBB17
 1358               		.stabs	"lastChar:r(0,11)",64,0,288,10
 1359               		.stabn	192,0,0,.LBB27-.LFBB17
 1360               		.stabn	224,0,0,.LBE27-.LFBB17
GAS LISTING /tmp/cceooh85.s 			page 34


 1361               	.Lscope17:
 1362               		.stabs	"",36,0,0,.Lscope17-.LFBB17
 1363               		.stabd	78,0,0
 1364               		.stabs	"",100,0,0,.Letext0
 1365               	.Letext0:
 1366               		.ident	"GCC: (GNU) 4.8.1"
GAS LISTING /tmp/cceooh85.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/cceooh85.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceooh85.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceooh85.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceooh85.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceooh85.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceooh85.s:109    .text:0000000000000000 lcdwNibble
     /tmp/cceooh85.s:177    .text:000000000000003e lcdWrite
     /tmp/cceooh85.s:228    .text:0000000000000062 lcdClear
     /tmp/cceooh85.s:272    .text:000000000000007a lcdInit
     /tmp/cceooh85.s:417    .text:0000000000000104 lcdwCmd
     /tmp/cceooh85.s:443    .text:000000000000010c lcdwChar
     /tmp/cceooh85.s:469    .text:0000000000000114 lcdwString
     /tmp/cceooh85.s:506    .text:000000000000012c lcdwUInt
     /tmp/cceooh85.s:590    .text:000000000000018c lcdwInt
     /tmp/cceooh85.s:635    .text:00000000000001ac lcdwLong
     /tmp/cceooh85.s:690    .text:00000000000001e0 lcdwULong
     /tmp/cceooh85.s:803    .text:0000000000000278 lcdFill
     /tmp/cceooh85.s:851    .text:00000000000002a2 lcdwStringNFill
     /tmp/cceooh85.s:915    .text:00000000000002d8 lcdAdvance
     /tmp/cceooh85.s:957    .text:00000000000002f2 lcdwStringAt
     /tmp/cceooh85.s:990    .text:0000000000000306 lcdInitBargraph
     /tmp/cceooh85.s:1207   .text:000000000000042c lcdPrintBargraphAt

UNDEFINED SYMBOLS
__udivmodhi4
__udivmodsi4
__umulhisi3
__mulsi3
