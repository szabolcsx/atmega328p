Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o (exit)
/usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
                              uart.o (__do_clear_bss)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/libm.a
LOAD uart.o
LOAD main.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x1b2
 *(.vectors)
 .vectors       0x0000000000000000       0x68 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
                0x0000000000000068                . = ALIGN (0x2)
                0x0000000000000068                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000068        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000068                __trampolines_end = .
 *(.progmem*)
                0x0000000000000068                . = ALIGN (0x2)
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000068                __ctors_start = .
 *(.ctors)
                0x0000000000000068                __ctors_end = .
                0x0000000000000068                __dtors_start = .
 *(.dtors)
                0x0000000000000068                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000068        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000068                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000068        0xc /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000074       0x16 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
                0x0000000000000074                __do_copy_data
 .init4         0x000000000000008a       0x10 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
                0x000000000000008a                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000009a        0x8 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 *(.init9)
 *(.text)
 .text          0x00000000000000a2        0x4 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
                0x00000000000000a2                __vector_22
                0x00000000000000a2                __vector_1
                0x00000000000000a2                __vector_24
                0x00000000000000a2                __vector_12
                0x00000000000000a2                __bad_interrupt
                0x00000000000000a2                __vector_6
                0x00000000000000a2                __vector_3
                0x00000000000000a2                __vector_23
                0x00000000000000a2                __vector_25
                0x00000000000000a2                __vector_11
                0x00000000000000a2                __vector_13
                0x00000000000000a2                __vector_17
                0x00000000000000a2                __vector_19
                0x00000000000000a2                __vector_7
                0x00000000000000a2                __vector_5
                0x00000000000000a2                __vector_4
                0x00000000000000a2                __vector_9
                0x00000000000000a2                __vector_2
                0x00000000000000a2                __vector_21
                0x00000000000000a2                __vector_15
                0x00000000000000a2                __vector_8
                0x00000000000000a2                __vector_14
                0x00000000000000a2                __vector_10
                0x00000000000000a2                __vector_16
                0x00000000000000a2                __vector_18
                0x00000000000000a2                __vector_20
 .text          0x00000000000000a6       0xda uart.o
                0x00000000000000a6                uartInit
                0x00000000000000b4                uartEnableTx
                0x00000000000000c0                uartDisableTx
                0x00000000000000cc                uartEnableRx
                0x00000000000000d8                uartDisableRx
                0x00000000000000e4                uartEnableTxInterrupt
                0x00000000000000f0                uartDisableTxInterrupt
                0x00000000000000fc                uartEnableRxInterrupt
                0x0000000000000108                uartDisableRxInterrupt
                0x0000000000000114                uartwChar
                0x0000000000000122                uartrChar
                0x0000000000000130                uartwString
                0x0000000000000148                uartrString
 .text          0x0000000000000180        0x0 main.o
 .text          0x0000000000000180        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000180        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text          0x0000000000000180        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000180                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000000180       0x2e main.o
                0x0000000000000180                main
 .text.libgcc.mul
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
                0x00000000000001ae                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000001ae        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
                0x00000000000001ae                exit
                0x00000000000001ae                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000001ae        0x4 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000001b2                _etext = .

.data           0x0000000000800100        0xe load address 0x00000000000001b2
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 .data          0x0000000000800100        0x0 uart.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 .rodata.str1.1
                0x0000000000800100        0xd main.o
 *(.gnu.linkonce.d*)
                0x000000000080010e                . = ALIGN (0x2)
 *fill*         0x000000000080010d        0x1 
                0x000000000080010e                _edata = .
                0x000000000080010e                PROVIDE (__data_end, .)

.bss            0x000000000080010e       0x12
                0x000000000080010e                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x000000000080010e        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 .bss           0x000000000080010e       0x12 uart.o
 .bss           0x0000000000800120        0x0 main.o
 .bss           0x0000000000800120        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800120        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000800120        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
                0x0000000000800120                PROVIDE (__bss_end, .)
                0x00000000000001b2                __data_load_start = LOADADDR (.data)
                0x00000000000001c0                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800120        0x0
                0x0000000000800120                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800120                PROVIDE (__noinit_end, .)
                0x0000000000800120                _end = .
                0x0000000000800120                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000      0xc30
 *(.stab)
 .stab          0x0000000000000000      0x8e8 uart.o
 .stab          0x00000000000008e8      0x348 main.o
                                        0x504 (size before relaxing)

.stabstr        0x0000000000000000      0xd50
 *(.stabstr)
 .stabstr       0x0000000000000000      0xd50 uart.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 uart.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 main.o

.note.gnu.build-id
 *(.note.gnu.build-id)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line .debug_line.* .debug_line_end)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(lcd2.out elf32-avr)
LOAD linker stubs
